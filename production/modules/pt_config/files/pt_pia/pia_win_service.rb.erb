LOG_FILE = "<%= ps_cfg_home %>/webserv/<%= domain_name %>/pia_win_service.log"
begin

  require 'rubygems'
  require 'win32/daemon'
  include Win32

  class PIADomain<%= domain_name %>Daemon < Daemon

    def service_init
      10.times{ |i|
        File.open(LOG_FILE, 'a'){ |f| f.puts("#{i}") }
        sleep 1
      }
    end

    def service_main(*args)
      system("<%= ps_cfg_home %>/webserv/<%= domain_name %>/bin/startPIA.cmd")

       # While we're in here the daemon is running.
       while running?
         if state == RUNNING
           sleep 20
         else # PAUSED or IDLE
           sleep 0.5
         end
       end
     end

     # This event triggers when the service receives a signal to stop. I've
     def service_stop
       msg = 'Received stop signal at: ' + Time.now.to_s
       File.open(LOG_FILE, 'a'){ |f| f.puts msg }
       system("<%= ps_cfg_home %>/webserv/<%= domain_name %>/bin/stopPIA.cmd")
     end

     # This event triggers when the service receives a signal to pause.
     #
     def service_pause
       msg = 'Received pause signal at: ' + Time.now.to_s
       File.open(LOG_FILE, 'a'){ |f| f.puts msg }
     end

     # This event triggers when the service receives a signal to resume
     # from a paused state.
     #
     def service_resume
       msg = 'Received resume signal at: ' + Time.now.to_s
       File.open(LOG_FILE, 'a'){ |f| f.puts msg }
     end
  end
  PIADomain<%= domain_name %>Daemon.mainloop

rescue Exception => err
  File.open(LOG_FILE, 'a'){ |f|
    f.puts "Daemon failure: #{err}"
    f.puts "Daemon failure: #{err.backtrace}"
  }
  raise
end
